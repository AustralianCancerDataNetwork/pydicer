{
 "cells": [
  {
   "attachments": {},
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Compute Radiomics\n",
    "\n",
    "[![Open In Colab](https://colab.research.google.com/assets/colab-badge.svg)](https://colab.research.google.com/github/AustralianCancerDataNetwork/pydicer/blob/main/examples/Radiomics.ipynb)\n",
    "\n",
    "In this example notebook we use [PyRadiomics](https://github.com/AIM-Harvard/pyradiomics) to\n",
    "compute various type of radiomics features. We use some\n",
    "[LCTSC](https://wiki.cancerimagingarchive.net/pages/viewpage.action?pageId=24284539) data from the\n",
    "Cancer Imaging Archive which has already been converted using PyDicer for demonstration purposes."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "try:\n",
    "    from pydicer import PyDicer\n",
    "except ImportError:\n",
    "    !pip install pydicer\n",
    "    from pydicer import PyDicer\n",
    "\n",
    "from pathlib import Path\n",
    "\n",
    "from pydicer.utils import fetch_converted_test_data\n",
    "\n",
    "from pydicer.utils import load_object_metadata"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Fetch data\n",
    "\n",
    "LCTSC data prepared for this example are downloaded and stored into a `testdata_lctsc` directory.\n",
    "We will use this for our PyDicer working directory."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "working_directory = fetch_converted_test_data(\"./testdata_lctsc\", dataset=\"LCTSC\")"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Initialise PyDicer object\n",
    "\n",
    "Using the working directory containing the LCTSC test data."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "pydicer = PyDicer(working_directory)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Compute Default Radiomics\n",
    "\n",
    "By default, PyDicer will compute only first-order radiomics features. Radiomics are computed for\n",
    "each structure available in the dataset using the image data of images linked to those structures."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "pydicer.analyse.compute_radiomics()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Fetch computed Radiomics\n",
    "\n",
    "Use the [get_all_computed_radiomics_for_dataset](https://australiancancerdatanetwork.github.io/pydicer/analyse.html#pydicer.analyse.data.AnalyseData.get_all_computed_radiomics_for_dataset) function to fetch all radiomics features computed\n",
    "in the last step.\n",
    "\n",
    "The `.head()` function on a Pandas DataFrame output the first 5 rows for inspection."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Display the DataFrame of radiomics computed\n",
    "df_radiomics = pydicer.analyse.get_all_computed_radiomics_for_dataset()\n",
    "df_radiomics.head()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Specify Radiomics to Compute\n",
    "\n",
    "PyDicer used the popular `pyradiomics` library to compute radiomics. So, you may specify any\n",
    "radiomics features provided in that library to be computed. See the [pyradiomics documentation for\n",
    "a list of radiomics features\n",
    "available](https://pyradiomics.readthedocs.io/en/latest/features.html).\n",
    "\n",
    "In this example, we specify all `shape` features as well as `first-order` features to be computed."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Import pyradiomics feature modules\n",
    "from radiomics import (\n",
    "    firstorder,\n",
    "    shape,\n",
    ")\n",
    "\n",
    "# Prepare a dict of features to compute grouped by class\n",
    "first_order_features = firstorder.RadiomicsFirstOrder.getFeatureNames()\n",
    "shape_features = shape.RadiomicsShape.getFeatureNames()\n",
    "compute_radiomics = {\n",
    "    \"firstorder\": [f for f in first_order_features if not first_order_features[f]],\n",
    "    \"shape\": [f for f in shape_features if not shape_features[f]],\n",
    "}\n",
    "\n",
    "# Pass the dict to the compute the radiomics\n",
    "pydicer.analyse.compute_radiomics(radiomics=compute_radiomics)\n",
    "\n",
    "# Fetch the computed radiomics and output the first few rows\n",
    "df_radiomics = pydicer.analyse.get_all_computed_radiomics_for_dataset()\n",
    "df_radiomics.head()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "You can also set a specific subset of features like this:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Specify features to compute grouped by class\n",
    "compute_radiomics = {\n",
    "    \"firstorder\": [\"Maximum\", \"Minimum\", \"Mean\", \"Median\"],\n",
    "    \"shape\": [\"SurfaceArea\", \"VoxelVolume\"],\n",
    "}\n",
    "\n",
    "# Pass the dict to the compute the radiomics\n",
    "pydicer.analyse.compute_radiomics(radiomics=compute_radiomics)\n",
    "\n",
    "df_radiomics = pydicer.analyse.get_all_computed_radiomics_for_dataset()\n",
    "df_radiomics.head()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Track Metadata\n",
    "\n",
    "When analysing your radiomic features, it may be useful to have certain metadata available from\n",
    "either the image or structure set. You can specify which DICOM header tags to extract metadata for\n",
    "and these will be stored alongside the radiomic feature values.\n",
    "\n",
    "In the cell below, we recompute our radiomics and store the `PatientSex` header value from the\n",
    "image series and the `StudyDate` value from the structure set."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Compute the radiomics specifying the meta data to keep\n",
    "pydicer.analyse.compute_radiomics(\n",
    "    radiomics=compute_radiomics,\n",
    "    image_meta_data=[\"PatientSex\"],\n",
    "    structure_meta_data=[\"StudyDate\"]\n",
    ")\n",
    "\n",
    "# Fetch the results and display the first rows\n",
    "df_radiomics = pydicer.analyse.get_all_computed_radiomics_for_dataset()\n",
    "df_radiomics.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "interpreter": {
   "hash": "814af119db7f8f2860617be3dcd1d37c560587d11c65bd58c45b1679d3ee6ea4"
  },
  "kernelspec": {
   "display_name": "Python 3.8.0 64-bit ('pydicer': pyenv)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.9.16"
  },
  "orig_nbformat": 4
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
