{
 "cells": [
  {
   "attachments": {},
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Working with Data\n",
    "\n",
    "Here we present some useful tips & tricks which to help working with data which has been converted\n",
    "using PyDicer. As you will see, working with data in PyDicer is heavily oriented around DataFrames\n",
    "provided by the Pandas library. If you aren't familiar with Pandas, we recommend working through \n",
    "the [Pandas Getting Started Tutorials](https://pandas.pydata.org/docs/getting_started/index.html)."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "try:\n",
    "    from pydicer import PyDicer\n",
    "except ImportError:\n",
    "    !pip install pydicer\n",
    "    from pydicer import PyDicer\n",
    "\n",
    "from pathlib import Path\n",
    "\n",
    "from pydicer.utils import (\n",
    "    fetch_converted_test_data,\n",
    "    load_object_metadata,\n",
    "    determine_dcm_datetime,\n",
    "    read_simple_itk_image\n",
    ")"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Setup PyDicer\n",
    "\n",
    "Here we load the LCTSC data which has already been converted. This is downloaded into the\n",
    "`testdata_lctsc` directory. We also initialise a `PyDicer` object."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "working_directory = fetch_converted_test_data(\"./testdata_lctsc\", dataset=\"LCTSC\")\n",
    "\n",
    "pydicer = PyDicer(working_directory)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Read Converted Data\n",
    "\n",
    "To obtain a DataFrame of the converted data, use the `read_converted_data` function."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "df = pydicer.read_converted_data()\n",
    "df"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Iterating Over Objects\n",
    "\n",
    "If you want to perform some operation on (for example) all images in your dataset, you can iterate\n",
    "over each image row like this. Within each loop we load each image as a `SimpleITK` image (just\n",
    "for demonstration purposes).)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "for idx, ct_row in df[df.modality==\"CT\"].iterrows():\n",
    "\n",
    "    print(f\"Loading image with hashed UID: {ct_row.hashed_uid}...\", end=\"\")\n",
    "\n",
    "    img = read_simple_itk_image(ct_row)\n",
    "\n",
    "    print(\" Complete\")"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Loading Object Metadata\n",
    "\n",
    "The metadata from the DICOM headers is stored by PyDicer and can be easily loaded using the\n",
    "`load_object_metadata` function. Simply pass a row from the converted DataFrame into this function\n",
    "to load the metadata for that object."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "first_row = df.iloc[0]\n",
    "ds = load_object_metadata(first_row)\n",
    "ds"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Keep only specific header tags\n",
    "\n",
    "Loading object metadata can be slow, especially when doing this for many objects at once. So, you\n",
    "can specify the `keep_tags` argument if you know which header attributes you want to use. This\n",
    "speeds up loading metadata significantly.\n",
    "\n",
    "Here we load only the `StudyDate`, `PatientSex` and `Manufacturer`.\n",
    "\n",
    "> Tip: These tags are defined by the DICOM standard, and we use `pydicom` to load this metadata. In\n",
    "> fact, the metadata returned is a `pydicom` Dataset. Check out the [`pydicom` documentation](https://pydicom.github.io/pydicom/dev/old/pydicom_user_guide.html) for more information."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "ds = load_object_metadata(first_row, keep_tags=[\"StudyDate\", \"PatientSex\", \"Manufacturer\"])\n",
    "ds"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Loading metadata for all data objects\n",
    "\n",
    "You can use the Pandas `apply` function to load metadata for all rows and add it as a column to the\n",
    "converted DataFrame."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "df[\"StudyDescription\"] = df.apply(lambda row: load_object_metadata(row, keep_tags=\"StudyDescription\").StudyDescription, axis=1)\n",
    "df"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Determine Date of Object\n",
    "\n",
    "There are several DICOM header tags which could define the date of an object. The DICOM standard\n",
    "doesn't require all of these to be set within the metadata. PyDicer provides the \n",
    "`determine_dcm_datetime` function to extract the date from the DICOM header."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "ds = load_object_metadata(first_row)\n",
    "obj_datetime = determine_dcm_datetime(ds)\n",
    "print(obj_datetime)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "interpreter": {
   "hash": "814af119db7f8f2860617be3dcd1d37c560587d11c65bd58c45b1679d3ee6ea4"
  },
  "kernelspec": {
   "display_name": "Python 3.8.0 64-bit ('pydicer': pyenv)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.9.16"
  },
  "orig_nbformat": 4
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
